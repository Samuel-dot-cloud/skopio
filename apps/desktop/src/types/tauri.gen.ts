/* eslint-disable */
// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async getConfig(): Promise<AppConfig> {
    return await TAURI_INVOKE("get_config");
  },
  async setTheme(theme: Theme): Promise<null> {
    return await TAURI_INVOKE("set_theme", { theme });
  },
  async setAfkTimeout(timeout: number): Promise<null> {
    return await TAURI_INVOKE("set_afk_timeout", { timeout });
  },
  async setHeartbeatInterval(interval: number): Promise<null> {
    return await TAURI_INVOKE("set_heartbeat_interval", { interval });
  },
  async fetchAppSummary(
    query: SummaryQueryInput,
  ): Promise<GroupedTimeSummary[]> {
    return await TAURI_INVOKE("fetch_app_summary", { query });
  },
  async fetchProjectsSummary(
    query: SummaryQueryInput,
  ): Promise<GroupedTimeSummary[]> {
    return await TAURI_INVOKE("fetch_projects_summary", { query });
  },
  async fetchActivityTypesSummary(
    query: SummaryQueryInput,
  ): Promise<GroupedTimeSummary[]> {
    return await TAURI_INVOKE("fetch_activity_types_summary", { query });
  },
  async fetchBucketedSummary(
    query: BucketedSummaryInput,
  ): Promise<BucketTimeSummary[]> {
    return await TAURI_INVOKE("fetch_bucketed_summary", { query });
  },
  async fetchTotalTime(query: SummaryQueryInput): Promise<number> {
    return await TAURI_INVOKE("fetch_total_time", { query });
  },
  async fetchRangeSummary(
    query: SummaryQueryInput,
  ): Promise<GroupedTimeSummary[]> {
    return await TAURI_INVOKE("fetch_range_summary", { query });
  },
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

export type AppConfig = {
  theme: Theme;
  heartbeat_interval: number;
  afk_timeout: number;
  flush_interval: number;
  sync_interval: number;
};
export type BucketTimeSummary = {
  bucket: string;
  grouped_values: Partial<{ [key in string]: number }>;
};
export type BucketedSummaryInput = {
  preset: TimeRangePreset;
  app_names?: string[] | null;
  project_names?: string[] | null;
  entity_names?: string[] | null;
  activity_types?: string[] | null;
  branch_names?: string[] | null;
  language_names?: string[] | null;
  group_by?: string | null;
  include_afk: boolean;
};
export type GroupedTimeSummary = { group_key: string; total_seconds: number };
export type SummaryQueryInput = {
  start: string | null;
  end: string | null;
  app_names?: string[] | null;
  project_names?: string[] | null;
  activity_types?: string[] | null;
  entity_names?: string[] | null;
  branch_names?: string[] | null;
  language_names?: string[] | null;
  include_afk: boolean;
};
export type Theme = "Light" | "Dark" | "System";
export type TimeBucket = "Day" | "Week" | "Month" | "Hour";
export type TimeRangePreset =
  | "Today"
  | "Yesterday"
  | "ThisWeek"
  | "LastWeek"
  | "ThisMonth"
  | "LastMonth"
  | { LastNDays: number }
  | { LastNWeeks: number }
  | { Custom: { start: string; end: string; bucket: TimeBucket } };

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
