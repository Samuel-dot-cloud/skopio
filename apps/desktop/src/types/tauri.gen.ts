/* eslint-disable */
// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async getConfig(): Promise<AppConfig> {
    return await TAURI_INVOKE("get_config");
  },
  async setTheme(theme: Theme): Promise<null> {
    return await TAURI_INVOKE("set_theme", { theme });
  },
  async setAfkTimeout(timeout: number): Promise<null> {
    return await TAURI_INVOKE("set_afk_timeout", { timeout });
  },
  async setHeartbeatInterval(interval: number): Promise<null> {
    return await TAURI_INVOKE("set_heartbeat_interval", { interval });
  },
  async fetchBucketedSummary(
    query: BucketSummaryInput,
  ): Promise<BucketTimeSummary[]> {
    return await TAURI_INVOKE("fetch_bucketed_summary", { query });
  },
  async fetchTotalTime(query: SummaryQueryInput): Promise<number> {
    return await TAURI_INVOKE("fetch_total_time", { query });
  },
  async fetchRangeSummary(
    query: SummaryQueryInput,
  ): Promise<GroupedTimeSummary[]> {
    return await TAURI_INVOKE("fetch_range_summary", { query });
  },
  async addGoal(input: GoalInput): Promise<null> {
    return await TAURI_INVOKE("add_goal", { input });
  },
  async getGoals(): Promise<Goal[]> {
    return await TAURI_INVOKE("get_goals");
  },
  async updateGoal(goalId: number, input: GoalUpdateInput): Promise<null> {
    return await TAURI_INVOKE("update_goal", { goalId, input });
  },
  async removeGoal(goalId: number): Promise<null> {
    return await TAURI_INVOKE("remove_goal", { goalId });
  },
  async fetchApps(): Promise<App[]> {
    return await TAURI_INVOKE("fetch_apps");
  },
  async fetchCategories(): Promise<Category[]> {
    return await TAURI_INVOKE("fetch_categories");
  },
  async fetchProjects(query: PaginationQuery): Promise<PaginatedProjects> {
    return await TAURI_INVOKE("fetch_projects", { query });
  },
  async fetchProject(query: ProjectQuery): Promise<Project | null> {
    return await TAURI_INVOKE("fetch_project", { query });
  },
  async searchProjects(query: ProjectSearchQuery): Promise<Project[]> {
    return await TAURI_INVOKE("search_projects", { query });
  },
  async fetchInsights(query: InsightQueryPayload): Promise<InsightResult> {
    return await TAURI_INVOKE("fetch_insights", { query });
  },
  async fetchEvents(query: BucketSummaryInput): Promise<EventGroupResult> {
    return await TAURI_INVOKE("fetch_events", { query });
  },
  async dismissNotificationWindow(): Promise<null> {
    return await TAURI_INVOKE("dismiss_notification_window");
  },
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

export type App = { id: string; name: string };
export type AppConfig = {
  theme: Theme;
  heartbeat_interval: number;
  afk_timeout: number;
  flush_interval: number;
  sync_interval: number;
};
export type BucketSummaryInput = {
  preset: TimeRangePreset;
  apps?: string[] | null;
  projects?: string[] | null;
  entities?: string[] | null;
  categories?: string[] | null;
  branches?: string[] | null;
  languages?: string[] | null;
  groupBy?: Group | null;
};
export type BucketTimeSummary = {
  bucket: string;
  grouped_values: Partial<{ [key in string]: number }>;
  /**
   * Optional per-group metadata (e.g. entity type when grouping by Entity)
   */
  group_meta: string | null;
};
export type Category = { id: string; name: string };
export type EventGroup = { group: string; events: FullEvent[] };
export type EventGroupResult =
  | { Flat: FullEvent[] }
  | { Grouped: EventGroup[] };
export type FullEvent = {
  id: string;
  timestamp: string;
  endTimestamp: string | null;
  duration: number | null;
  category: string;
  app: string | null;
  entity: string | null;
  project: string | null;
  branch: string | null;
  language: string | null;
  source: string;
};
export type Goal = {
  id: number;
  name: string;
  targetSeconds: number;
  timeSpan: TimeSpan;
  useApps: boolean;
  useCategories: boolean;
  ignoreNoActivityDays: boolean;
  createdAt: string;
  updatedAt: string;
  apps: string[];
  categories: string[];
  excludedDays: string[];
};
export type GoalInput = {
  name: string;
  createdAt: string;
  updatedAt: string;
  targetSeconds: number;
  timeSpan: TimeSpan;
  useApps: boolean;
  useCategories: boolean;
  ignoreNoActivityDays: boolean;
  apps: string[];
  categories: string[];
  excludedDays: string[];
};
export type GoalUpdateInput = {
  name?: string | null;
  targetSeconds?: number | null;
  timeSpan?: TimeSpan | null;
  useApps?: boolean | null;
  useCategories?: boolean | null;
  ignoreNoActivityDays?: boolean | null;
  apps?: string[] | null;
  categories?: string[] | null;
  excludedDays?: string[] | null;
};
export type Group =
  | "app"
  | "project"
  | "language"
  | "branch"
  | "category"
  | "entity"
  | "source";
export type GroupedTimeSummary = { group_key: string; total_seconds: number };
export type InsightBucket = "day" | "week" | "month" | "year";
export type InsightQueryPayload = {
  insightType: InsightType;
  insightRange?: string | null;
  groupBy?: Group | null;
  limit?: number | null;
  bucket?: InsightBucket | null;
};
export type InsightResult =
  | { activeYears: number[] }
  | { topN: [string, number][] }
  | { mostActiveDay: { date: string; total_duration: number } }
  | { aggregatedAverage: Partial<{ [key in string]: [string, number][] }> };
export type InsightType =
  | "activeYears"
  | "topN"
  | "mostActiveDay"
  | "aggregatedAverage";
export type NotificationPayload = {
  title: string;
  durationMs: number;
  message: string | null;
  soundFile: string | null;
};
export type PaginatedProjects = {
  data: Project[];
  totalPages: number | null;
  cursors: (string | null)[];
};
export type PaginationQuery = { after: string | null; limit: number | null };
export type Project = { id: string; name: string; root_path: string | null };
export type ProjectQuery = { id: string };
export type ProjectSearchQuery = { name: string; limit: number };
export type SummaryQueryInput = {
  start: string | null;
  end: string | null;
  apps?: string[] | null;
  projects?: string[] | null;
  categories?: string[] | null;
  entities?: string[] | null;
  branches?: string[] | null;
  languages?: string[] | null;
};
export type Theme = "Light" | "Dark" | "System";
/**
 * A time granularity used for bucketing data in reports
 *
 * - `Hour` groups events by each hour
 * - `Day` groups events by each day
 * - `Week` groups events by each week
 * - `Month` groups events by each month
 * - `Year` groups events by each year.
 */
export type TimeBucket =
  /**
   * Bucket data by day
   */
  | "day"
  /**
   * Bucket day by week
   */
  | "week"
  /**
   * Bucket data by month
   */
  | "month"
  /**
   * Bucket data by hour
   */
  | "hour"
  /**
   * Bucket data by year
   */
  | "year";
/**
 * A predefined range of time used to filter or summarize data.
 */
export type TimeRangePreset =
  /**
   * Represents today (from midnight to now).
   */
  | "today"
  /**
   * Represents yesterday (midnight to midnight)
   */
  | "yesterday"
  /**
   * The current calendar week starting from Monday.
   */
  | "thisWeek"
  /**
   * The current calendar week before this one.
   */
  | "lastWeek"
  /**
   * The current calendar month
   */
  | "thisMonth"
  /**
   * The previous calendar month
   */
  | "lastMonth"
  /**
   * The last N full minutes
   */
  | { lastNMinutes: number }
  /**
   * The last N full days (excludes today by default).
   */
  | { lastNDays: [number, boolean] }
  /**
   * The last N full weeks (excludes this week by default).
   */
  | { lastNWeeks: [number, boolean] }
  /**
   * The last N full months (excludes this month by default).
   */
  | { lastNMonths: [number, boolean] }
  /**
   * The last N full years (excludes this year by default).
   */
  | { lastNYears: [number, boolean] }
  /**
   * A custom range of time with a specific bucket size.
   */
  | {
      custom: {
        /**
         * The start date (inclusive).
         */
        start: string;
        /**
         * The end date (exclusive).
         */
        end: string;
        /**
         * The desired bucket granularity.
         */
        bucket: TimeBucket;
      };
    };
export type TimeSpan = "day" | "week" | "month" | "year";

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
