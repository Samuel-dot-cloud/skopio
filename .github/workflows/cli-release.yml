name: Build release CLI artifacts

on:
  push:
    branches:
      - release
  workflow_dispatch: {}

permissions:
  contents: write
  id-token: write

env:
  CLI_PATH: apps/cli
  BIN_NAME: skopio-cli

jobs:
  release-cli:
    strategy:
      fail-fast: false

    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-apple-darwin

      - name: Detect version from Cargo.toml
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          VER=$(cargo metadata --format-version=1 --no-deps --manifest-path "${{ env.CLI_PATH }}/Cargo.toml" \
                | /usr/bin/python3 -c 'import sys,json;print(json.load(sys.stdin)["packages"][0]["version"])')
          echo "version=$VER" >> $GITHUB_OUTPUT
          echo "tag=v$VER" >> $GITHUB_OUTPUT
          echo "Releasing skopio-cli v$VER"

      - name: Build aarch64
        working-directory: ${{ env.CLI_PATH }}
        run: cargo build --release --locked --target aarch64-apple-darwin

      - name: Build x86_64
        working-directory: ${{ env.CLI_PATH }}
        run: cargo build --release --locked --target x86_64-apple-darwin

      - name: Zip + checksums
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          TARGET_DIR="${CARGO_TARGET_DIR:-target}"

          pack() {
            local arch="$1"
            local cpu
            case "$arch" in
              aarch64-apple-darwin) cpu="aarch64" ;;
              x86_64-apple-darwin)  cpu="x86_64"  ;;
              *) cpu="$arch" ;;
            esac

            local bin="${TARGET_DIR}/${arch}/release/${{ env.BIN_NAME }}"
            local staged="dist/${{ env.BIN_NAME }}-darwin-${cpu}"
            local zip="dist/${{ env.BIN_NAME }}-darwin-${cpu}.zip"

            if [[ ! -f "$bin" ]]; then
              echo "❌ Expected binary not found: $bin"
              ls -la "${TARGET_DIR}/${arch}/release" || true
              exit 1
            fi

            cp "$bin" "$staged"
            strip -S -x "$staged" || true
            (cd dist && zip -q "$(basename "$zip")" "$(basename "$staged")")

            local sh256; sh256=$(shasum -a 256 "$zip" | awk '{print $1}')
            local size;  size=$(stat -f "%z" "$zip")

            echo "${sh256}  $(basename "$zip")" >> dist/checksums_sha256.txt
            echo "${arch}_zip=$zip"   >> $GITHUB_OUTPUT
            echo "${arch}_sha=$sh256" >> $GITHUB_OUTPUT
            echo "${arch}_size=$size" >> $GITHUB_OUTPUT
          }

          : > dist/checksums_sha256.txt
          pack aarch64-apple-darwin
          pack x86_64-apple-darwin

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: "v${{ steps.meta.outputs.version }}"
          files: |
            ${{ steps.pkg.outputs.aarch64-apple-darwin_zip }}
            ${{ steps.pkg.outputs.x86_64-apple-darwin_zip }}
            dist/checksums_sha256.txt

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.2
        with:
          cosign-release: "v2.5.3"

      - name: Cosign sign artifacts
        env:
          COSIGN_EXPERIMENTAL: "1"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/signatures
          sign() {
            local file="$1" base; base=$(basename "$file")
            cosign sign-blob --yes "$file" \
              --output-signature "dist/signatures/$base.sig" \
              --output-certificate "dist/signatures/$base.cert" \
              --bundle "dist/signatures/$base.bundle"
          }
          sign "${{ steps.pkg.outputs.aarch64-apple-darwin_zip }}"
          sign "${{ steps.pkg.outputs.x86_64-apple-darwin_zip }}"

      - name: Upload signatures to Release
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          files: dist/signatures/*

      - name: Attach latest.json
        shell: bash
        run: |
          set -euo pipefail
          OWNER_REPO="${{ github.repository }}"
          TAG="${{ steps.meta.outputs.tag }}"
          VER="${{ steps.meta.outputs.version }}"
          FILE_ARM="$(basename "${{ steps.pkg.outputs.aarch64-apple-darwin_zip }}")"
          FILE_X64="$(basename "${{ steps.pkg.outputs.x86_64-apple-darwin_zip }}")"
          BASE="https://github.com/${OWNER_REPO}/releases/download/${TAG}"
          cat > latest.json <<EOF
          {
            "version": "$VER",
            "released_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "assets": {
              "darwin-aarch64": {
              "url": "$BASE/$FILE_ARM",
              "sha256": "${{ steps.pkg.outputs.aarch64-apple-darwin_sha }}",
              "size": ${{ steps.pkg.outputs.aarch64-apple-darwin_size }},
              "sig": {
                "type": "cosign",
                "signature_url": "$BASE/signatures/$FILE_ARM.sig",
                "certificate_url": "$BASE/signatures/$FILE_ARM.cert",
                "bundle_url": "$BASE/signatures/$FILE_ARM.bundle"
             }
           },
           "darwin-x86_64": {
             "url": "$BASE/$FILE_X64",
             "sha256": "${{ steps.pkg.outputs.x86_64-apple-darwin_sha }}",
             "size": ${{ steps.pkg.outputs.x86_64-apple-darwin_size }},
             "sig": {
               "type": "cosign",
               "signature_url": "$BASE/signatures/$FILE_X64.sig",
               "certificate_url": "$BASE/signatures/$FILE_X64.cert",
               "bundle_url": "$BASE/signatures/$FILE_X64.bundle"
             }
            }
           }
          }
          EOF
          gh release upload "${TAG}" latest.json --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
